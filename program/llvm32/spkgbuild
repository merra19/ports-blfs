# description	: Low Level Virtual Machine 32 bit
# depends	: cmake ninja libffi-32 python3 libxml2-32 perl ncurses-32 
# depends	: zlib-32 binutils zstd-32 llvm

name=llvm32
_name=llvm
version=20.1.1
_version=20.1.1
release=1
options="!lto !asneeded"
source="https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/llvm-$version.src.tar.xz
        https://anduin.linuxfromscratch.org/BLFS/llvm/llvm-cmake-${_version}.src.tar.xz
        https://anduin.linuxfromscratch.org/BLFS/llvm/llvm-third-party-${_version}.src.tar.xz
        https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/clang-$version.src.tar.xz
        https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/compiler-rt-$version.src.tar.xz"
noextract="llvm-cmake-${_version}.src.tar.xz llvm-third-party-${_version}.src.tar.xz clang-$version.src.tar.xz compiler-rt-$version.src.tar.xz"

build() {
	cd ${_name}-$version.src

    export CFLAGS="-O2 -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wformat -Wformat-security -Wno-error -Wl,-z,max-page-size=0x4000 -march=$MMARCH -fno-lto"
    export CXXFLAGS="$CFLAGS"
    export FFLAGS="-O2 -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=32 -Wno-error -Wl,-z,max-page-size=0x4000 -march=$MMARCH -fno-lto"
    export FCFLAGS="$FFLAGS"

    tar -xf ../llvm-cmake-${_version}.src.tar.xz                 &&
    tar -xf ../llvm-third-party-${_version}.src.tar.xz           &&
    sed "/LLVM_COMMON_CMAKE_UTILS/s@../cmake@cmake-${_version}.src@" \
        -i CMakeLists.txt                                        &&
    sed "/LLVM_THIRD_PARTY_DIR/s@../third-party@third-party-${_version}.src@" \
        -i cmake/modules/HandleLLVMOptions.cmake

    tar -xf ../clang-$version.src.tar.xz -C tools &&
    mv tools/clang-$version.src tools/clang

    tar -xf ../compiler-rt-$version.src.tar.xz -C projects    &&
    mv projects/compiler-rt-$version.src projects/compiler-rt &&
    sed '/^set(LLVM_COMMON_CMAKE_UTILS/d'                   \
        -i projects/compiler-rt/CMakeLists.txt

    # Fix python 
    grep -rl '#!.*python' | xargs sed -i '1s/python$/python3/'

    sed 's/utility/tool/' -i utils/FileCheck/CMakeLists.txt

    CC=gcc CXX=g++ \
    cmake -B build \
        -D CMAKE_INSTALL_PREFIX=/usr \
        -D CMAKE_C_FLAGS:STRING=-m32 \
        -D CMAKE_SKIP_INSTALL_RPATH=ON \
        -D CMAKE_CXX_FLAGS:STRING=-m32 \
        -D LLVM_TARGET_ARCH:STRING=i686 \
        -D LLVM_LIBDIR_SUFFIX=32 \
        -D LLVM_ENABLE_FFI=ON \
        -D CMAKE_BUILD_TYPE=Release \
        -D LLVM_BUILD_LLVM_DYLIB=ON \
        -D LLVM_LINK_LLVM_DYLIB=ON \
        -D LLVM_ENABLE_RTTI=ON \
        -D LLVM_DEFAULT_TARGET_TRIPLE="i686-pc-linux-gnu" \
        -D LLVM_TARGETS_TO_BUILD="X86;host;AMDGPU" \
        -D LLVM_HOST_TRIPLE="x86_64-pc-linux-gnu" \
        -D LLVM_BINUTILS_INCDIR=/usr/include \
        -D LLVM_INCLUDE_BENCHMARKS=OFF \
        -D CLANG_DEFAULT_PIE_ON_LINUX=ON \
        -D CLANG_CONFIG_FILE_SYSTEM_DIR=/etc/clang \
        -W no-dev -G Ninja
    ninja -C build
}

package() {
    cd ${_name}-$version.src/build

    DESTDIR=$PWD/DESTDIR ninja install

    mkdir -p "$PKG"/usr/lib32 "$PKG"/usr/bin/ "$PKG"/usr/include/llvm/Config
    cp -vr DESTDIR/usr/lib32/* "$PKG"/usr/lib32

    # keep 32bit header and config
    mv DESTDIR/usr/bin/llvm-config "$PKG"/usr/bin/llvm-config32
    mv DESTDIR/usr/include/llvm/Config/llvm-config.h "$PKG"/usr/include/llvm/Config/llvm-config-32.h
}